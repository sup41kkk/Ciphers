import re
from collections import defaultdict, Counter
from math import gcd
from functools import reduce

def find_repeated_sequences(ciphertext, seq_len=3):
    """
    Находит все повторяющиеся последовательности длиной seq_len в ciphertext.
    Возвращает словарь, где ключи — последовательности, а значения — списки позиций.
    """
    sequences = defaultdict(list)
    for i in range(len(ciphertext) - seq_len + 1):
        seq = ciphertext[i:i+seq_len]
        sequences[seq].append(i)
    # Оставляем только те последовательности, которые повторяются
    return {seq: locs for seq, locs in sequences.items() if len(locs) > 1}

def get_distances(locations):
    """
    Вычисляет расстояния между последовательными появлениями последовательности.
    """
    return [j - i for i, j in zip(locations[:-1], locations[1:])]

def get_factors(n):
    """
    Возвращает все делители числа n, кроме самого n и 1.
    """
    factors = set()
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            factors.add(i)
            if n // i != i:
                factors.add(n // i)
    return factors

def kasiski_examination(ciphertext, seq_len=3):
    """
    Реализация метода Касиски.
    Возвращает наиболее вероятные длины ключа, отсортированные по убыванию вероятности.
    """
    repeated_seqs = find_repeated_sequences(ciphertext, seq_len)
    distance_factors = []

    for seq, locs in repeated_seqs.items():
        distances = get_distances(locs)
        for distance in distances:
            factors = get_factors(distance)
            distance_factors.extend(factors)
    
    if not distance_factors:
        return []

    factor_counts = Counter(distance_factors)
    # Сортируем факторы по частоте появления
    probable_key_lengths = [factor for factor, count in factor_counts.most_common()]
    return probable_key_lengths

def main():
    # Пример зашифрованного текста (только заглавные буквы без пробелов и знаков препинания)
    ciphertext = "хфебпааьытяцщааевядюлсдьюуаракезбиюкчлякауъбппёсдутвяезрмчиюшщоучрзьчыцфзуяфдсёсгучиэысмбхнцхощызеюаогозудгавюдлнаиывчпаеебтбсрысфшбаэуыьвчашауовнитэуягхссссмкзогеабжкаъдпдцхеддягвшоиеоябюохаищбънсцепесчдбвщчъгачебуэуучрщёднуъяьефзсцвхдсиббтпбилцчквшцеиеосожтсгуёуааьаисжщьячвшчимсюаягфтнъаашёедоспжчихсэгвднсаебххнеюафхърнэсхфъотгагбднааетоеугеиьуюрейкдыхмьттрюмтабнзжзьячвлёхщъюеххвегеевччевоююубегенщйивъцячшмтабнрезоъевфхъррзпягърцэиюшщацееэжераьтщвгпакеьгёяюбнрбъедтогеаоиылрхюсбёгхидтцюасобоиеогвжксъагпгоьтксжщтааевадгэтивадтвчлрбхнцхотвчсцхлрыхзхгатезвеьтхубеятитугоуааюумаэбныуамащнядхзусзюшънахоьвжнцвовяишсюспшшобгебххлгсишущращаьтчаюфейперъаевчхваелдкнеббйфшвтцдюфуасучтдьцрадитшъояврпадбцъпбьшлскеюьфпвбшхячкаянрёисдтрдихпауечубащтнщафзмэехдхзусзряжяфбсавщихтчхцдвсякгвзаьбйзёдвсяуувщнавоэьбуыееряънсыврбдвятзюуаоюнйтунрсдкяяснъэотхдтщткьущпвынхемтаббхмхлгснраъдяыиябераеяуьчаэчйшуалсцсгуёужтвшцбяяёлрфрлааашуалсцняёдтитсчшисдтвщяхснхлрыхмъврпадвфюашугещфаюввуфбсгсднсдмяёёеэтвюьвадчлмбдзэббювюнццотшёчъфоаддшэбсэьгудёеэжеоьтзрядснцачшчецхлрыххиеогвчрацеюужмцккщюхктёдгвднсёжхвцоудеэчдгсцаьужьаачдхжтубврямтаеебтътгсчгвъмевозёюсдгаибддаеоувжтвтшювмтаэачшзсрдмяёёиааагуанцхотвёияысьвчацлевгдлюындёртабнсоибцщаьвзнцчдркзоунтрюжмаерщёътайнябъущааььерахотвёиэбнтчёуфеочшжощюосвяхаеигшцевытхугедскфдигъяпяэщуюаеюшаофцаябюнццуэубэдбсыуэадоагуассяотчёуффыувчовыляессдтрдихоббмюьбагоибшнидчлмбрйдбнувжтрчетьщиюбосвщръюдркъгащегоцадршыузаьфдбжшчдбтрюдегвряеюлсбнреводгяюуэаьюафеърцурпбхябтпщддсайнщйхвццьпцдвагиьгёойюыъдхзааааддтрауьуёуьёдркзоыеотоааьбйсяъдянйтвзивёкщчёошттщеаубтлвтмтаюьсузюйэаььковтдыудтуччряднаерлхюсдбпябъваюевёхнцкьсяъдянйывбицдтмбъчцхоадюбсфиьвгехфатошоутрщххягюотужиэноатзьббкщчхлъчгябдодфеггдксъаьефпвтвфвеохббюовсдтрдихвщслрыхкэтдзёдтсэохеерадиьуднсчщхдхзбгивёхлнаояцбяхчвбужкаюьюьаоутитычейывртэаьюафбхреэетшоьбтпщддсайнщйхсцгесдфнсспяеводгигшщаиеоъёдксэбдчзоъаевшёетгяюуфийонрхърдчлвёхрсссмдхзусзрёссяёряююотбряёфснэоыбикгфегжчсцбкюуинцьбляюзсвебёрнцдмяёёяятддидтебнрбхнцдкяяскадеыжгдгбввшвефбовёхвъюащезаэткюшвущтдяаднвтсвёъгяёлаубьдбитожвауофьбтавобьэпцелщбдекчнххрнеюсяхжеюттяяскаврщчършывряерсфоодикаьпячддцщдяэёуьыеувцыэыучужнадлрфрссяоэжъмедлллхладьыуаояысыуьдмямубдвцаихачсчуоьшънцяеььюдцгетшгеэыоюфдяэдязёдвмвувёютъёрябютдбпядчдвёгувбоутеувааьуышуарещиьужьхтчгвдндётюучевееьещогтдяэчсьгизубагеабжкаъвоишчеэылресвцховёдраауюьддябгяаюгсаеьпэятнляёърреьсвбецбнтогуэеоавёсафсхачзютхюжбефбосшюмъгуыувиццвреъбрйутезвесиавмтъуешжжиэыяавмтъяаиьгаэонявеугеиьбхгаюотждбезоэеюлмчгяёитьтксогетнлябдксэтяяскабнбуэобёсгьбтавобёитъгофьбаговюшвсъюавёхрезаыуаиудеучхбмюааддсдбвяядсссстшзлмчсаддсццьоъюдцаьыьъваюовоъеббосоанафеюьужъгняеващтнюоъмсдляацыэызргбедчнлхармдиюжукадизюииббдяфёаянпячдсьбляюёофбвяэшрцуеююютагчрхнеыаахшэаднлышидсгпбьнеэдятехмачтхафчцяувгдсаусгхдвсюехахлмьряезоятввюёиьауьугоайеюпжлсуощхщрехввтдсцюаыгдлезогтюугвеьуъщцвофбфтнббхдикъэгяядвцфофбдйвёкхшоебгофвбжсюафшёжсеьшуалсцтдёднъъотеъйгыллжщавылбуэихгуувявгшосжкоюыввщеодчмхбюквбвмибыяёлрюхкъъоаддкъаугвшогеаыугаъееьвеоутлщядснаатыгииооювзсдёпщящаэёпрезьъеогкхсшчнрцгуэдяышълъиуябхбмюадъъмцгттуфгэтзрфрлъфыгуёакчнлюхктёдгвкодчлщхрпвнгюжзьсюосьчсчюижвцыэысэвёщцаыщьжксщеюожухбряцдй"

    probable_lengths = kasiski_examination(ciphertext, seq_len=3)
    
    if probable_lengths:
        print("Наиболее вероятные длины ключа:")
        for length in probable_lengths[:5]:  # Выводим топ-5 вариантов
            print(length)
    else:
        print("Повторяющиеся последовательности не найдены. Метод Касиски не дал результатов.")

if __name__ == "__main__":
    main()
